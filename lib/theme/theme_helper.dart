import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  var _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.whiteA700,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: colorScheme.primary,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(17.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      radioTheme: RadioThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return appTheme.whiteA700;
          }
          return colorScheme.onSurface;
        }),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.black90001.withOpacity(0.35),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyMedium: TextStyle(
          color: appTheme.black90001,
          fontSize: 14.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.black90001.withOpacity(0.45),
          fontSize: 10.fSize,
          fontFamily: 'Urbanist',
          fontWeight: FontWeight.w400,
        ),
        displaySmall: TextStyle(
          color: colorScheme.primary,
          fontSize: 36.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w700,
        ),
        headlineLarge: TextStyle(
          color: colorScheme.primary,
          fontSize: 30.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        headlineMedium: TextStyle(
          color: colorScheme.primary,
          fontSize: 26.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 25.fSize,
          fontFamily: 'Almarai',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: appTheme.black90001,
          fontSize: 12.fSize,
          fontFamily: 'Urbanist',
          fontWeight: FontWeight.w700,
        ),
        labelMedium: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 10.fSize,
          fontFamily: 'Urbanist',
          fontWeight: FontWeight.w700,
        ),
        labelSmall: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 9.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.whiteA700,
          fontSize: 22.fSize,
          fontFamily: 'Almarai',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: appTheme.black90001,
          fontSize: 18.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        titleSmall: TextStyle(
          color: appTheme.red700,
          fontSize: 14.fSize,
          fontFamily: 'Urbanist',
          fontWeight: FontWeight.w700,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF566CA2),
    primaryContainer: Color(0XFF181D27),
    secondaryContainer: Color(0XFFDE5345),

    // Error colors
    errorContainer: Color(0XFF464444),
    onError: Color(0X8E566CA2),
    onErrorContainer: Color(0XFF0C0507),

    // On colors(text colors)
    onPrimary: Color(0XFF0600B3),
    onPrimaryContainer: Color(0XFFABABAB),
    onSecondaryContainer: Color(0XFF0601B4),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber600 => Color(0XFFEEB500);
  Color get amberA10072 => Color(0X72FFE076);
  Color get amberA200 => Color(0XFFFCD240);

  // Black
  Color get black900 => Color(0XFF0F0F0F);
  Color get black90001 => Color(0XFF000000);

  // BlueGray
  Color get blueGray100 => Color(0XFFD6D6D6);
  Color get blueGray10001 => Color(0XFFD9D9D9);
  Color get blueGray200 => Color(0XFFB8B8D1);
  Color get blueGray300 => Color(0XFF90A4AE);
  Color get blueGray400 => Color(0XFF8B8F9C);
  Color get blueGray40001 => Color(0XFF888888);
  Color get blueGray50 => Color(0XFFEBF7F7);
  Color get blueGray600 => Color(0XFF546E7A);
  Color get blueGray700 => Color(0XFF347A6A);
  Color get blueGray800 => Color(0XFF474B51);
  Color get blueGray80001 => Color(0XFF444750);

  // BlueGrayf
  Color get blueGray4003f => Color(0X3F8C8C8C);

  // DeepOrange
  Color get deepOrange500 => Color(0XFFFF4B26);

  // Gray
  Color get gray100 => Color(0XFFF4F4F6);
  Color get gray10001 => Color(0XFFF3F2FB);
  Color get gray10002 => Color(0XFFF3F3F3);
  Color get gray10003 => Color(0XFFF7F7F7);
  Color get gray200 => Color(0XFFECECEC);
  Color get gray20001 => Color(0XFFEEEEEE);
  Color get gray20099 => Color(0X99EBEBEB);
  Color get gray400 => Color(0XFFB7B7B7);
  Color get gray40001 => Color(0XFFBEBEBE);
  Color get gray50 => Color(0XFFF8F8FD);
  Color get gray500 => Color(0XFF979797);
  Color get gray50001 => Color(0XFF9D9D9D);
  Color get gray50002 => Color(0XFFA1A1A1);
  Color get gray50087 => Color(0X879F9D9D);
  Color get gray5001 => Color(0XFFFAFBFA);
  Color get gray600 => Color(0XFF707070);
  Color get gray60001 => Color(0XFF777777);
  Color get gray700 => Color(0XFF676767);
  Color get gray70001 => Color(0XFF555555);
  Color get gray800 => Color(0XFF4F4F4F);
  Color get gray900 => Color(0XFF241F20);
  Color get gray90001 => Color(0XFF12121D);

  // Grayf
  Color get gray5003f => Color(0X3FA0A0A0);
  Color get gray5003f01 => Color(0X3F9E9E9E);
  Color get gray6003f => Color(0X3F808080);
  Color get gray6003f01 => Color(0X3F868181);
  Color get gray6007f => Color(0X7F797979);
  Color get gray8003f => Color(0X3F3C3C3C);

  // Graye
  Color get gray5005e => Color(0X5EA7A7A7);

  // GrayC
  Color get gray800C5 => Color(0XC5393939);

  // Green
  Color get green400 => Color(0XFF4BBC71);
  Color get green600 => Color(0XFF3CA241);

  // LightGreen
  Color get lightGreen500 => Color(0XFF88B361);

  // Orange
  Color get orangeA200 => Color(0XFFFF9338);

  // Red
  Color get red200 => Color(0XFFF78F90);
  Color get red700 => Color(0XFFDA3A2A);
  Color get redA200 => Color(0XFFFB5A5B);
  Color get redA400 => Color(0XFFED2241);

  // Redf
  Color get red4003f => Color(0X3FC15263);

  // White
  Color get whiteA700 => Color(0XFFFFFFFF);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
